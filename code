# import library

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
import pandas as pd

# Import Data

train_d = pd.read_csv("Training.csv")
x = train_d.iloc[:, :-1].values
y = train_d.iloc[:, -1].values

# Encode data

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y1 = le.fit_transform(y)

#Split data into training and testing set

from sklearn.model_selection import train_test_split
x_train, x_test, y1_train, y1_test = train_test_split(x, y1, test_size = 0.2, random_state= 0)

# Apply Kernel SVM classification and check results

from sklearn.svm import SVC
classifier1 = SVC(kernel = 'rbf', random_state = 0)
classifier1.fit(x_train, y_train)

y1_pred = classifier1.predict(x_test)
y2_test = le.inverse_transform(y1_test)

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y2_test, y1_pred)
accuracy_score(y2_test, y1_pred)

# Apply Naive Bayes classification and check results

from sklearn.naive_bayes import GaussianNB
classifier2 = GaussianNB()
classifier2.fit(x_train, y_train)

y2_pred = classifier2.predict(x_test)

cm = confusion_matrix(y2_test, y2_pred)
accuracy_score(y2_test, y2_pred)

# Apply Random forest classification and check results

from sklearn.ensemble import RandomForestClassifier
classifier3 = RandomForestClassifier(n_estimators=10, criterion='entropy' , random_state = 0)
classifier3.fit(x_train,y_train)

y3_pred = classifier3.predict(x_test)

cm = confusion_matrix(y2_test, y3_pred)
accuracy_score(y2_test, y3_pred)

# check on unseen data

test_d = pd.read_csv("Testing.csv")
test_x = train_d.iloc[:, :-1].values
test_y = train_d.iloc[:, -1].values

pred_test_y = classifier1.predict(test_x)
print(pred_test_y)

cm = confusion_matrix(test_y, pred_test_y)
print(cm)
accuracy_score(test_y, pred_test_y)
